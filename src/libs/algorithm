#ifndef _YOUMIX_ALOGIRTHM_H_
#define _YOUMIX_ALOGIRTHM_H_

#include <stdint.h>
#include <stddef.h>

#include "utility"
#include "./numeric"

namespace std {
template<typename InputIterator, typename OutputIterator>
OutputIterator copy(InputIterator first, InputIterator last, OutputIterator result) {
    while (first != last)
        *result++ = *first++;
    return result;
}

template <typename InputIterator, typename Size, typename OutputIterator>
OutputIterator copy_n(InputIterator first, Size n, OutputIterator result) {
    while (n > 0) {
        *result = *first;
        ++result;
        ++first;
        --n;
    }
    return result;
}

template <typename OutputIterator, typename Size, typename T>
OutputIterator fill_n(OutputIterator first, Size n, const T &val) {
    while (n > 0) {
        *first = val;
        ++first;
        --n;
    }
    return first;
}

template <typename T> void swap(T &a, T &b) {
    T t(std::move(a));
    a = std::move(b);
    b = std::move(t);
}

template <typename ForwardIter>
void iter_swap(ForwardIter a, ForwardIter b) {
    swap(*a, *b);
}

template <typename BidirectionalIteraotr>
void reverse(BidirectionalIteraotr first, BidirectionalIteraotr last) {
    while ((first != last) && (first != --last)) {
        iter_swap(first, last);
        ++first;
    }
}

template <typename T, size_t N> void swap(T (&a)[N], T (&b)[N]) {
    swap_ranges(a, a + N, b);
}

template <typename ForwardIter1, typename ForwardIter2>
ForwardIter2 swap_ranges(ForwardIter1 first1, ForwardIter1 last1,
                         ForwardIter2 first2) {
    while (first1 != last1) {
        swap(*first1, *first2);
        ++first1;
        ++first2;
    }
    return first2;
}

template <typename T> const T &min(const T &a, const T &b) {
    return a < b ? a : b;
}

template <typename T> const T &max(const T &a, const T &b) {
    return a < b ? b : a;
}

template<typename InputIterator, typename Fn>
void for_each(InputIterator first, InputIterator end, Fn fn) {
    for (InputIterator iter = first; iter != end; ++iter)
        fn(*iter);
}

template<typename InputIterator, typename T>
InputIterator find(InputIterator first, InputIterator last, const T& val) {
    while (first != last) {
        if (*first == val)
            return first;
        ++first;
    }
    return last;
}

template<typename InputIterator, typename Pred>
InputIterator find_if(InputIterator first, InputIterator last, Pred fn) {
    while (first != last) {
        if (fn(*first))
            return first;
        ++first;
    }
    return last;
}

template<typename InputIterator, typename T>
size_t count(InputIterator first, InputIterator last, const T& val) {
    size_t ret = 0;
    while (first != last) {
        if (*first == val)
            ++ret;
        ++first;
    }
    return ret;
}

template<typename InputIterator, typename Pred>
size_t count_if(InputIterator first, InputIterator last, Pred fn) {
    size_t ret = 0;
    while (first != last) {
        if (fn(*first))
            ++ret;
        ++first;
    }
    return ret;
}

template<typename InputIterator1, typename InputIterator2>
bool equal(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2) {
    while (first1 != last1) {
        if (!(*first1 == *first2))
            return false;
        ++first1;
        ++first2;
    }
    return true;
}

template<typename InputIterator1, typename InputIterator2, typename Pred>
bool equal(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, Pred fn) {
    while (first1 != last1) {
        if (!fn(*first1, *first2))
            return false;
        ++first1;
        ++first2;
    }
    return true;
}

template<typename InputIterator, typename OutputIterator, typename Operation>
OutputIterator transform(InputIterator first1, InputIterator last1, OutputIterator result, Operation op) {
    while (first1 != last1) {
        *result = op(*first1);
        ++result;
        ++first1;
    }
    return result;
}

template<typename ForwardIter>
ForwardIter unique(ForwardIter first, ForwardIter last) {
    if (first == last)
        return last;
    ForwardIter result = first;
    while (++first != last) {
        if (!(*result == *first))
            *++result = *first;
    }
    return ++result;
}

template<typename ForwardIter, typename BinaryPredicate>
ForwardIter unique(ForwardIter first, ForwardIter last, BinaryPredicate fn) {
    if (first == last)
        return last;
    ForwardIter result = first;
    while (++first != last) {
        if (!fn(*result, *first))
            *++result = *first;
    }
    return ++result;
}

template<typename ForwardIter, typename Pred>
ForwardIter partition(ForwardIter first, ForwardIter last, Pred fn) {
    if (first == last)
        return last;
    ForwardIter next = first;
    for (ForwardIter i = first; i != last; ++i) {
        if (fn(*i))
            std::swap(*i, *++next);
    }
    std::swap(*next, *first);
    return ++next;
}

template<typename RandomAssessIterator>
void sort(RandomAssessIterator first, RandomAssessIterator last) {
    for (RandomAssessIterator fst = first; fst != last && fst != last - 1; ) {
        RandomAssessIterator pivot = partition(fst, last, [val = *fst](const auto& x) { return x < val; });
        sort(fst, pivot);
        fst = pivot;
    }
}

template<typename ForwardIter, typename T>
ForwardIter lower_bound(ForwardIter first, ForwardIter last, const T& val) {
    ForwardIter ret = first;
    while (first < last) {
        ForwardIter mid = first + (last - first) / 2;
        if (*mid < val) {
            first = mid + 1;
        } else {
            ret = (*mid == val) ? mid : ret;
            last = mid;
        }
    }
    return ret;
}

template<typename ForwardIter, typename T>
ForwardIter upper_bound(ForwardIter first, ForwardIter last, const T& val) {
    ForwardIter ret = first;
    while (first < last) {
        ForwardIter mid = first + (last - first) / 2;
        if (*mid <= val) {
            ret = (*mid == val) ? mid : ret;
            first = mid + 1;
        } else {
            last = mid;
        }
    }
    return ++ret;
}

template<typename InputIterator1, typename InputIterator2,
         typename OutputIterator>
OutputIterator merge(InputIterator1 first1, InputIterator1 last1,
                     InputIterator2 first2, InputIterator2 last2,
                     OutputIterator result) {
    while (true) {
        if (first1 == last1)
            return std::copy(first2, last2, result);
        if (first2 == last2)
            return std::copy(first1, last1, result);
        *result++ = (*first2 < *first1) ? *first2++ : *first1++;
    }
}

template<typename ForwardIter, typename T>
bool binary_search(ForwardIter first, ForwardIter last, const T& val) {
    first = std::lower_bound(first, last, val);
    return first != last && !(val < *first);
}

template<typename ForwardIter>
ForwardIter min_element(ForwardIter first, ForwardIter last) {
    if (first == last)
        return last;
    ForwardIter smallest = first;
    while (++first != last)
        if (*first < *smallest)
            smallest = first;
    return smallest;
}

template<typename ForwardIter, typename Pred>
ForwardIter min_element(ForwardIter first, ForwardIter last, Pred comp) {
    if (first == last)
        return last;
    ForwardIter smallest = first;
    while (++first != last)
        if (comp(*first, *smallest))
            smallest = first;
    return smallest;
}

template<typename ForwardIter>
ForwardIter max_element(ForwardIter first, ForwardIter last) {
    if (first == last)
        return last;
    ForwardIter largest = first;
    while (++first != last)
        if (*largest < *first)
            largest = first;
    return largest;
}

template<typename ForwardIter, typename Pred>
ForwardIter max_element(ForwardIter first, ForwardIter last, Pred comp) {
    if (first == last)
        return last;
    ForwardIter largest = first;
    while (++first != last)
        if (comp(*largest, *first))
            largest = first;
    return largest;
}

template<typename InputIterator1, typename InputIterator2>
bool lexicographical_compare(InputIterator1 first1, InputIterator1 last1,
        InputIterator2 first2, InputIterator2 last2) {
    while (first1 != last1) {
        if (first2 == last2 || *first2 < *first1)
            return false;
        else if (*first1 < *first2)
            return true;
        ++first2;
        ++first1;
    }
    return first2 != last2;
}

template<typename BidirectionalIteraotr>
bool next_permutation(BidirectionalIteraotr first, BidirectionalIteraotr last) {
    if (first == last || first == last - 1)
        return false;
    BidirectionalIteraotr i, j;
    for (j = last - 1; j != first && !(*(j - 1) < *j); --j)
        ;
    if (j == first)
        return false;
    --j;
    i = j + 1;
    for (BidirectionalIteraotr k = j + 1; k != last; ++k)
        if (*j < *k && *k < *i)
            i = k;
    std::iter_swap(j, i);
    std::reverse(j + 1, last);
    return true;
}
}

#endif
