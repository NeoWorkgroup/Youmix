#ifndef _YOUMIX_UTILITY_H_
#define _YOUMIX_UTILITY_H_

namespace std {
template <typename T> struct remove_reference { typedef T type; };

template <typename T> struct remove_reference<T &> { typedef T type; };

template <typename T> struct remove_reference<T &&> { typedef T type; };

template <typename T>
constexpr typename std::remove_reference<T>::type &&move(T &&arg) noexcept {
    return static_cast<typename std::remove_reference<T>::type &&>(arg);
}

template <typename T>
constexpr T &&forward(typename std::remove_reference<T>::type &&arg) noexcept {
    return static_cast<T &&>(arg);
}

template <typename T>
constexpr T &&forward(typename std::remove_reference<T>::type &arg) noexcept {
    return static_cast<T&&>(arg);
}

template <typename T, typename U = T> T exchange(T &obj, U &&new_value) {
    T old_value = std::move(obj);
    obj = std::forward<U>(new_value);
    return old_value;
}
}

#endif
