#ifndef _YOUMIX_FUNCTIONAL_HPP_
#define _YOUMIX_FUNCTIONAL_HPP_

#include "utility"
#include "memory"
#include "algorithm"

namespace {

template<typename> struct class_of;

template<typename R, typename C, typename... Args>
struct class_of<R (C::*)(Args...)> {
    typedef C type;
};

}

namespace std {
template<typename> class function;

template<typename R, typename... Args>
class function<R(Args...)> {
public:
    template<typename T>
    function(const T& fn) : pfunctor(new T(fn)), ref_cnt(new int(1)) {
        invoke = helper<T>::invoke;
        del = helper<T>::del;
    }

    function(R (*fn)(Args...)) : pfunctor(reinterpret_cast<void*>(fn)), ref_cnt(nullptr) {
        invoke = helper<R(Args...)>::invoke;
        del = helper<R(Args...)>::nop;
    }

    //template<typename C, typename... Rest>
    //function(R (C::*fn)(Rest...)) : pfunctor(reinterpret_cast<void*>(fn)), ref_cnt(nullptr) {
    //    invoke = member_helper<R (C::*)(Rest...)>::member_invoke;
    //    del = member_helper<R (C::*)(Rest...)>::nop;
    //}

    function(const function& rhs) 
        : pfunctor(rhs.pfunctor), ref_cnt(rhs.ref_cnt), invoke(rhs.invoke), del(rhs.del) {
        ++*ref_cnt;
    }

    ~function() { decr_ref(); }

    function& operator=(function rhs) {
        rhs.swap(*this);
        return *this;
    }

    void swap(function& rhs) {
        using std::swap;
        swap(pfunctor, rhs.pfunctor);
        swap(ref_cnt, rhs.ref_cnt);
        swap(invoke, rhs.invoke);
        swap(del, rhs.del);
    }

    R operator()(Args&&... args) const {
        return invoke(pfunctor, std::forward<Args>(args)...);
    }

private:
    void* pfunctor;
    int* ref_cnt;

    R (*invoke)(void*, Args&&...);
    void (*del)(void*);

    template<typename T>
    struct helper {
        static R invoke(void* p, Args&&... args) {
            return (*(T*)p)(std::forward<Args>(args)...);
        }
        static void del(void* p) { delete (T*)p; }
        static void nop(void*) { }
    };

    //template<typename T>
    //struct member_helper {
    //    static R member_invoke(void *p, Args&&... args) {
    //        push_args(std::forward<Args>(args)...);
    //        __asm__ __volatile__("call *%0" : : "r"(p));
    //    }
    //    static void del(void*) {}
    //    static void nop(void*) {}
    //private:
    //    static void push_args() {}

    //    template<typename Head, typename... Tail>
    //    static void push_args(Head&& head, Tail&&... tail) {
    //        push_args(std::forward<Tail>(tail)...);
    //        __asm__ __volatile__("push %0" : : "r"(head));
    //    }
    //};

    void decr_ref() {
        if (ref_cnt && --*ref_cnt == 0) {
            delete ref_cnt;
            del(pfunctor);
        }
    }
};
}

#endif
