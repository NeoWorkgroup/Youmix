#pragma once

namespace std {
template <typename T> struct remove_reference { typedef T type; };

template <typename T> struct remove_reference<T &> { typedef T type; };

template <typename T> struct remove_reference<T &&> { typedef T type; };

template <typename T>
constexpr typename std::remove_reference<T>::type &&move(T &&arg) noexcept {
    return static_cast<typename std::remove_reference<T>::type &&>(arg);
}

template <typename T>
constexpr T &&forward(typename std::remove_reference<T>::type &&arg) noexcept {
    return static_cast<T &&>(arg);
}
}
